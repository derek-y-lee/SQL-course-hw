/* Derek Lee 
CS 31 Assignment 6
dlee_assignment6.sql*/

SHOW warnings; /* enable warnings!*/

USE bookstore;


/*Query 1: Returns count of number of orders in ORDERS table
AND sum of tax_amount column in ORDERS table*/

SELECT COUNT(order_id) as number_of_orders, SUM(tax_amount) AS tax_amount
FROM ORDERS;

/*Query 2: Displays product ID and number of orders placed for each product
in decreasing order and labeled as NumOrders*/

SELECT product_id, quantity as NumOrders 
FROM orderitems
ORDER BY NumOrders desc;

/*Query 3: Returns one row for each category that has products
with the following columns:
1) The category_name column from the CATEGORY table
2) The count of products in the PRODUCT table
3) The list price of the most expensive product in PRODUCT table*/

SELECT category_name, COUNT(*) AS product_count, 
MAX(list_price) AS most_expensive_product
FROM category c, product p
WHERE p.category_id = c.category_id
GROUP BY category_name
ORDER BY product_count desc;

/*Query 4: Returns one row for each customer that has orders with:
1) The email_address column from CUSTOMER table
2) Sum of the item price in ORDERITEMS table multiplied by quantity
3) Sum of discount amount column in ORDERITEMS multiplied by quantity*/

SELECT email_address, SUM(oi.item_price*oi.quantity) AS item_price_total, 
SUM(oi.discount_amount*oi.quantity) AS discount_amount_total
FROM customer c, orderitems oi, orders o
JOIN orderitems ON orderitems.order_id = o.order_id
WHERE c.customer_id = o.customer_id
GROUP BY email_address;


/*Query 5: Returns one row for each customer that has orders with:
1) The email_address column from CUSTOMER table
2) Count of the number of orders
3) Total amount for each order*/

SELECT email_address, COUNT(*) AS order_count, 
SUM((item_price - discount_amount)*quantity) AS order_total
FROM customer c, orderitems oi, orders o
WHERE c.customer_id = o.customer_id AND o.order_id = oi.order_id
GROUP BY email_address
HAVING order_count > 1;

/*Query 6: Modifies solution to query 5 so it only counts
and totals item_price greater than 400*/

SELECT email_address, COUNT(*) AS order_count, 
SUM((item_price - discount_amount)*quantity) AS order_total
FROM customer c, orderitems oi, orders o
WHERE c.customer_id = o.customer_id AND o.order_id = oi.order_id AND item_price > 400
GROUP BY email_address
HAVING order_count > 1;

/*Query 7: Returns email address from CUSTOMER 
and count of distinct products from customer's orders*/

SELECT email_address, COUNT(DISTINCT product_id) AS number_of_products
FROM customer c, orderitems oi, orders o
WHERE c.customer_id = o.customer_id AND o.order_id = oi.order_id
GROUP BY email_address;

/*Query 8: Retrieves vendor ID and number of products
with list price of $100 or higher for each vendor*/


SELECT v.vendor_id, COUNT(DISTINCT p.product_id) AS number_of_products
FROM vendor v, product p
WHERE v.vendor_id = p.vendor_id AND list_price >= 100
GROUP BY vendor_id;


/*Query 9: For each group where +1 products are from same category
and supplied by the same vendor, returns vendor id, product category id,
number of products in group, and average price of products in group*/

SELECT vendor_id, category_id, COUNT(DISTINCT product_id) AS number_of_products,
AVG(list_price) AS average_list_price
FROM product
GROUP BY vendor_id, category_id
HAVING COUNT(*) >1;


/*Query 10: Determines how many products are in the Printer category*/

SELECT COUNT(DISTINCT product_name) AS number_of_printers
FROM product p, category c
WHERE p.category_id = c.category_id AND category_name LIKE 'Printer'; 

/*Query 11: Returns total profit generated by sales to customer 77779*/

SELECT SUM((list_price-item_price)*quantity) AS profit
FROM customer c, orders o, product p, orderitems oi
WHERE c.customer_id = o.customer_id 
AND oi.product_id = p.product_id 
AND c.customer_id = '77779';

/*Query 12: Returns following columns from ORDERS table
1) The card_number column
2) The length of the card_number column
3) The last four digits of the card_number column*/

SELECT card_number, character_length(card_number) AS card_number_length, 
RIGHT(card_number,4) AS last_four_digits, 
CONCAT('XXXX-','XXXX-','XXXX-',RIGHT(card_number,4)) AS formatted_number
FROM orders;




